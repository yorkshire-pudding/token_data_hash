<?php

/**
 * @file
 * The module file.
 */

/**
 * Implements hook_help().
 */
function token_data_hash_help($route_name, \Drupal\Core\Routing\RouteMatchInterface $route_match) {
  if ($route_name == 'help.page.token_data_hash') {
    $module_handler = \Drupal::service('module_handler');
    $path = $module_handler->getModule('token_data_hash')->getPath();
    $file = file_get_contents($path . "/README.md");
    return check_markup($file);
  }
}

/**
 * Implements hook_token_info().
 */
function token_data_hash_token_info(): array {
  $info['types']['hashes'] = array(
    'name' => t('Data Hashes'),
    'description' => t('Comma separated lists stored in the url query string as the variable "hash".'),
  );
  $info['tokens']['hashes']['base64'] = array(
    'name' => t('Base 64'),
    'description' => t('A hash encoded in base 64 (Not secure).'),
    'type' => 'array',
  );
  $info['tokens']['hashes']['open_ssl'] = array(
    'name' => t('OpenSSL AES 256 ECB'),
    'description' => t('The hash is encrypted with OpenSSL encryption using the aes-256-ecb encryption mode.
      The parameter is the password which will be ran through an md5 checksum and used as the encryption key
      (Only provides minimal security).'),
    'dynamic' => TRUE,
    'type' => 'array',
  );

  return $info;
}

/**
 * Implements hook_tokens().
 *
 * Sets up a token that will read a url parameter, decode it as a base 64
 * string and treat it like an array token.
 */
function token_data_hash_tokens($type, $tokens, array $data, array $options, \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata): array {
  $replacements = array();
  if ($type != 'hashes') {
    return $replacements;
  }
  $param_name = Drupal::config('token_data_hash.config')->get('url_param');
  $bubbleable_metadata->addCacheContexts(['url.query_args:' . $param_name]);
  $origVal = \Drupal::request()->get($param_name);
  if (empty($origVal)) {
    return $replacements;
  }
  $encoder = new \Drupal\token_data_hash\Base64Encoder();
  $val = $encoder->decode($origVal);
  foreach ($tokens as $name => $original) {
    if ($name == 'base64') {
      $arr = explode(",", $val);
      $replacements[$original] = token_render_array($arr, $options);
    }
  }
  if ($query_tokens = \Drupal::token()->findWithPrefix($tokens, 'base64')) {
    foreach ($query_tokens as $name => $original) {
      $arr = explode(",", $val);
      // Generate the token as an array or render the array as a whole.

      $replacements += \Drupal::token()->generate(
        'array',
        $query_tokens,
        array('array' => $arr),
        $options,
        $bubbleable_metadata
      );
    }
  }
  if ($query_tokens = \Drupal::token()->findWithPrefix($tokens, 'open_ssl')) {
    foreach ($query_tokens as $name => $original) {
      // Separate out the rest of the token string.
      $parts = explode(":", $name);
      // Decode the string.
      if (isset($parts[0])) {
        $encoder = new \Drupal\token_data_hash\OpenSSLEncoder($parts[0]);
        $plain = $encoder->decode($origVal);
      }
      $arr = explode(",", $plain);
      // Generate the token as an array or render the array as a whole.
      if ($qt = \Drupal::token()->findWithPrefix($query_tokens, $parts[0])) {
        $replacements += \Drupal::token()->generate(
          'array',
          $qt,
          array('array' => $arr),
          $options,
          $bubbleable_metadata
        );
      }
      else {
        $replacements[$original] = token_render_array($arr, $options);
      }
    }
  }
  return $replacements;
}

